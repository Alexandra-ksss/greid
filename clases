<?php
interface InterfaceParent
{
    public function name();
}
class Parents implements InterfaceParent
{
    protected const CONSTANT = 'лет';

    protected array $data;

    public function __construct()
    {
        $this->data = [
            'adress' => '123',
            'home' => '1',
            'number' => '888858514654',
        ];
    }
    
    public function name() //Доступен везде
    {
        return 'Имя Родителя';
    }

    private function family() //Доступен только родителю, нельзя переопределить в дочернем классе
    {
        return 'Фамилия';
    }

    protected function age()  //Доступен в родительском и дочерних классах
    {
        return '10' . self::CONSTANT;
    }

    public static function textStatic()
    {
        echo 'Текст из статического метода';
    }

    public static $text = 'Текст из статического метода Родителя';

    public static function selfStat()
    {
        echo self::$text;
    }

    public function __get($name)
    {
        return $this->data[$name] ?? null;
    }
}

class Child extends Parents
{
    public function name()
    {
        return 'Имя Ребенка и возраст семьи';
    }

    public static $text = 'Текст из статического метода Наследника';
}

$parent = new Parents();
$child = new Child();
$nameParent = $parent->name(); //нестатический метод
$parent::textStatic(); //статический метод
$child::selfStat(); //выведет текст из Родительского метода, потому что self:: (если использовать static:: то будет использовано значение наследника
$parent->adress(); // магический метод get
